<project name="core build" default="start" basedir=".">
	<target name="start">
		<echo message="Reading basic properties..." />

		<property file="build.properties" />
		
		<tstamp>
			<format property="build.date" pattern="${build.date.pattern}" />
			<format property="build.time" pattern="${build.time.pattern}"/>
		</tstamp>

		<echo message="${msg.start}" />
		<echo message="Location     : ${proj.root}/${proj.name}" />
		<echo message="Build Date   : ${build.date}" />
		<echo message="Build Time   : ${build.time}hrs" />
		<echo message="Build By     : ${build.user}" />
		
		<echo message=" " />
		<echo message="Reading version properties..." />

		<!--Reading the existing version number-->
		<property file="${src.dir}/org/iq/util/version/core-version.properties" />

		<echo message="Existing version : ${core.version.number}" />

		<!--Updating the existing version's build number-->
		<propertyfile file="${src.dir}/org/iq/util/version/core-version.properties">
			<entry key="core.version.build.number" type="int" default="${core.version.build.number}" operation="+" />
		</propertyfile>
		
		<!--Creating new version's build number properties-->
		<propertyfile file="new-build-number.properties">
			<entry key="new.version.build.number" type="int" default="${core.version.build.number}" operation="+" />
		</propertyfile>
		
		<!--Reading the updated version number-->
		<property file="new-build-number.properties" />
		
		<!--Deleting new version's build number properties-->
		<delete file="new-build-number.properties"/>
		
		<property name="build.version" value="${core.version.major}.${core.version.minor}.${core.version.patch}.${core.version.hotfix}" />
		<property name="build.dev.version" value="${core.version.major}.${core.version.minor}.${core.version.patch}.${core.version.hotfix}.${new.version.build.number}" />

		<echo message=" " />
		<echo message="Build Version: ${build.version}" />
		<echo message="Build Dev Version: ${build.dev.version}" />
		<echo message=" " />

		<delete dir="${dist.dir}" />

		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.dir}/lib" />
		<mkdir dir="${dist.dir}/jar" />
		<!-- <mkdir dir="${dist.dir}/war" /> -->
		<mkdir dir="${dist.dir}/db" />
		<mkdir dir="${dist.dir}/src" />
		<mkdir dir="${dist.dir}/temp/bin" />
		<mkdir dir="${dist.dir}/temp/lib" />
		<mkdir dir="${dist.dir}/temp/conf" />
		
		<!-- Copying required supporting libraries to ${dist.dir}/lib -->
		<antcall target="copy.libraries"></antcall>
		
		<!-- Building core jar to ${dist.dir}/jar -->
		<antcall target="build.core.jar"></antcall>
		
		<!-- Building core conf jar to ${dist.dir}/jar -->
		<antcall target="build.core.conf.jar"></antcall>
		
		<!-- Building core war to ${dist.dir}/war -->
		<!-- <antcall target="build.core.war"></antcall> -->
		
		<!-- Copying db scripts (if any) to ${dist.dir}/db -->
		<antcall target="copy.db.scripts"></antcall>
		
		<!-- Building src zip to ${dist.dir}/src -->
		<antcall target="build.src.zip"></antcall>
		
		<!-- Copying readme.txt to ${dist.dir} -->
		<antcall target="copy.readme.txt"></antcall>
		
		<!-- Copying license to ${dist.dir} -->
		<antcall target="copy.license"></antcall>
		
		<!-- Deleting ${dist.dir}/temp -->
		<antcall target="delete.temp.dir"></antcall>
		
		<!-- Zipping ${dist.dir} -->
		<antcall target="zip.dist"></antcall>

		<!--FOR DEV-->
		<!-- <antcall target="dev.copy.war" /> -->
		<!--FOR DEV-->

	</target>
	
	<!-- Copying required supporting libraries to ${dist.dir}/lib -->
	<target name="copy.libraries">
		<!-- Copying required supporting libraries to ${dist.dir}/lib -->
		<echo message="Copying required supporting libraries to ${dist.dir}/lib"/>
		<copy todir="${dist.dir}/lib" verbose="true">
			<fileset dir="${lib.dir}">
				<!-- PUT JAR FILE ENTRIES THAT YOU INTEND TO USE FOR THIS PROJECT -->
				<include name="com.mysql.jdbc_5.1.5.jar"/>
				<include name="commons-validator-1.4.0.jar"/>
				
				<!-- jersey related -->
				<include name="javax.ws.rs-api-2.0.1.jar"/>
				<include name="hk2-api-2.4.0-b10.jar"/>
				<include name="hk2-locator-2.4.0-b10.jar"/>
				<include name="hk2-utils-2.4.0-b10.jar"/>
				<include name="jackson-all-1.9.11.jar"/>
				<include name="javassist-3.18.1-GA.jar"/>
				<include name="javax.annotation-api-1.2.jar"/>
				<include name="javax.inject-2.4.0-b10.jar"/>
				<include name="jersey-client.jar"/>
				<include name="jersey-common.jar"/>
				<include name="jersey-container-servlet-core.jar"/>
				<include name="jersey-container-servlet.jar"/>
				<include name="jersey-guava-2.17.jar"/>
				<include name="jersey-server.jar"/>
				<include name="validation-api-1.1.0.Final.jar"/>
				<!-- jersey related -->
				
				<include name="jstl-1.2.jar"/>
			</fileset>
		</copy>
	</target>
	
	
	<!-- Building core jar -->
	<target name="build.core.jar">
        <!-- Preparing classpath reference variable based on jars present in ${dist.dir}/lib -->
		<echo message="Preparing classpath reference variable based on jars present in ${dist.dir}/lib"/>
	    <path id="project.classpath">
	        <fileset dir="${dist.dir}/lib">
	        	<include name="**/*.jar"/>
	        </fileset>
			<fileset dir="${lib.dir}">
				<include name="javax.servlet-api-3.0.1.jar"/>
				<include name="javax.ws.rs-api-2.0.1.jar"/>
	        </fileset>
	    </path>

        <!-- Compiling java files -->
		<echo message="Using Java version ${ant.java.version}."/>
		<echo message="Compiling java files present in ${src.dir}"/>
		<javac srcdir="${src.dir}"
			destdir="${dist.dir}/temp/bin"
			classpathref="project.classpath"
			debug="true"
			debuglevel="lines,vars,source"
			includeantruntime="false" />

        <!-- Copying other resource files present in ${src.dir} to ${dist.dir}/temp/bin -->
		<echo message="Copying other resource files present in ${src.dir} to ${dist.dir}/temp/bin"/>
		<copy todir="${dist.dir}/temp/bin" verbose="true">
			<fileset dir="${src.dir}">
				<include name="**/**"/>
				<exclude name="**/*.java"/>
			</fileset>
		</copy>

		<!-- Building the jar -->
		<jar destfile="${dist.dir}/jar/${proj.name}-${build.version}.jar" basedir="${dist.dir}/temp/bin">
			<include name="com/iq/**" />
			<include name="org/iq/**" />
			<manifest>
				<attribute name="Implementation-Title" value="${proj.name}-${build.version}.jar" />
				<attribute name="Implementation-Vendor" value="${comp.name}" />
				<attribute name="Implementation-Version" value="${build.version}" />
				<attribute name="Development-Version" value="${build.dev.version}" />
				<attribute name="Implementation-Date" value="${build.date} ${build.time}" />
			</manifest>
		</jar>
	</target>

	<!--Building core conf jar-->
	<target name="build.core.conf.jar">
		<!-- Copying conf files present in ${proj.name} project to ${dist.dir}/temp/conf -->
		<echo message="Copying conf files present in ${proj.name} project to ${dist.dir}/temp/conf" />
		<copy todir="${dist.dir}/temp/conf" verbose="true">
			<fileset dir="${res.dir}">
				<include name="**/*.conf"/>
				<type type="file"/>
			</fileset>
		</copy>

		<!-- Building the jar -->
		<jar destfile="${dist.dir}/jar/${proj.name}-${build.version}-conf.jar" basedir="${dist.dir}/temp/conf">
			<include name="**/*.conf" />
			<manifest>
				<attribute name="Implementation-Title" value="${proj.name}-${build.version}-conf.jar" />
				<attribute name="Implementation-Vendor" value="${comp.name}" />
				<attribute name="Implementation-Version" value="${build.version}" />
				<attribute name="Development-Version" value="${build.dev.version}" />
				<attribute name="Implementation-Date" value="${build.date} ${build.time}" />
			</manifest>
		</jar>
	</target>

	
	<!--Building core war-->
	<target name="build.core.war">
		<!-- Copying libraries from ${dist.dir}/lib to ${dist.dir}/temp/lib; to be used for building war -->
		<echo message="Copying libraries from ${dist.dir}/lib to ${dist.dir}/temp/lib; to be used for building war"/>
		<copy todir="${dist.dir}/temp/lib" verbose="true">
			<fileset dir="${dist.dir}/lib">
				<include name="*"/>
			</fileset>
		</copy>

		<!-- Copying jars from ${dist.dir}/jar to ${dist.dir}/temp/lib; to be used for building war -->
		<echo message="Copying jars from ${dist.dir}/jar to ${dist.dir}/temp/lib; to be used for building war"/>
		<copy todir="${dist.dir}/temp/lib" verbose="true">
			<fileset dir="${dist.dir}/jar">
				<include name="*"/>
			</fileset>
		</copy>

		<!-- Building the war -->
		<war warfile="${dist.dir}/war/${proj.name}-${build.version}.war" needxmlfile="false">
			<lib dir="${dist.dir}/temp/lib">
				<include name="**/*.jar" />
			</lib>
			<fileset dir="${web.dir}">
				<include name="**/*.html" />
				<include name="**/*.jsp" />
				<include name="**/*.css" />
				<include name="**/*.js" />
				<include name="**/*.png" />
				<include name="**/*.gif" />
			</fileset>
			<manifest>
				<attribute name="Implementation-Title" value="${proj.name}-${build.version}.war" />
				<attribute name="Implementation-Vendor" value="${comp.name}" />
				<attribute name="Implementation-Version" value="${build.version}" />
				<attribute name="Development-Version" value="${build.dev.version}" />
				<attribute name="Implementation-Date" value="${build.date} ${build.time}" />
			</manifest>
		</war>
	</target>
	
	<!--Copying db scripts (if any) to ${dist.dir}/db-->
	<target name="copy.db.scripts" depends="db.scripts.dir.check, do.copy.db.scripts, dont.copy.db.scripts"></target>
	
	<target name="do.copy.db.scripts" depends="db.scripts.dir.check" if="db.scripts.dir.exists">
		<copy todir="${dist.dir}/db" verbose="true">
			<fileset dir="${db.script.dir}/${build.version}">
				<include name="**/*.sql"/>
			</fileset>
		</copy>
	</target>
	
	<target name="dont.copy.db.scripts" depends="db.scripts.dir.check" unless="db.scripts.dir.exists">
		<echo>${db.script.dir}/${build.version} missing</echo>
		<echo file="${dist.dir}/db/no-db-changes.txt">Version ${build.version} do not have any database changes.</echo>
	</target>
	
	<target name="db.scripts.dir.check">
		<condition property="db.scripts.dir.exists">
			<available file="${db.script.dir}/${build.version}" type="dir"/>
		</condition>
	</target>
	
	<target name="build.src.zip">
		<zip destfile="${dist.dir}/src/${proj.name}-${build.version}_src.zip" basedir="${src.dir}">
			<include name="**" />
		</zip>
	</target>
	
	<target name="copy.readme.txt">
		<copy todir="${dist.dir}" verbose="true">
			<fileset dir=".">
				<include name="readme.txt"/>
			</fileset>
		</copy>
	</target>
	
	<target name="copy.license">
		<copy todir="${dist.dir}" verbose="true">
			<fileset dir="..">
				<include name="LICENSE"/>
			</fileset>
		</copy>
	</target>
	
	<target name="delete.temp.dir">
		<delete dir="${dist.dir}/temp" />
	</target>
	
	<target name="zip.dist">
		<zip destfile="${dist.dir}/${proj.name}-release-${build.version}.zip" basedir="${dist.dir}"></zip>
	</target>

	<!--FOR DEV-->
	<target name="dev.copy.war">
		<property environment="env"/>
		<delete dir="${env.CATALINA_HOME}/webapps/${proj.name}" />
		<copy file="${dist.dir}/war/${proj.name}-${build.version}.war" tofile="${env.CATALINA_HOME}/webapps/${proj.name}.war" verbose="true" />
	</target>
	<!--FOR DEV-->
</project>